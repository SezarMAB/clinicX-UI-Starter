@use 'sass:meta';
@use '@angular/material' as mat;

// Material 2 palettes are deprecated in v20, using Material 3 palettes
$mat-colors: (
  red: mat.$red-palette,
  pink: mat.$rose-palette,
  purple: mat.$violet-palette,
  deep-purple: mat.$violet-palette,
  indigo: mat.$blue-palette,
  blue: mat.$blue-palette,
  light-blue: mat.$azure-palette,
  cyan: mat.$cyan-palette,
  teal: mat.$cyan-palette,
  green: mat.$green-palette,
  light-green: mat.$chartreuse-palette,
  lime: mat.$chartreuse-palette,
  yellow: mat.$yellow-palette,
  amber: mat.$orange-palette,
  orange: mat.$orange-palette,
  deep-orange: mat.$orange-palette,
  brown: mat.$orange-palette,
  gray: (
    50: #fafafa,
    100: #f5f5f5,
    200: #eeeeee,
    300: #e0e0e0,
    400: #bdbdbd,
    500: #9e9e9e,
    600: #757575,
    700: #616161,
    800: #424242,
    900: #212121,
  ),
  blue-gray: (
    50: #eceff1,
    100: #cfd8dc,
    200: #b0bec5,
    300: #90a4ae,
    400: #78909c,
    500: #607d8b,
    600: #546e7a,
    700: #455a64,
    800: #37474f,
    900: #263238,
  ),
  white: white,
  black: black,
  light: rgba(white, .87),
  dark: rgba(black, .87),
);

@mixin generate-colors($prefix, $property) {
  @each $name, $value in $mat-colors {

    // If the value is a map, continue to each
    @if meta.type-of($value)=='map' {
      @each $hue, $color in $value {
        @if ($hue !='contrast') {
          .#{$prefix + '-' + $name + '-' + $hue} {
            #{$property}: $color !important;
          }
        }
      }
    }

    @if meta.type-of($value)=='color' {
      .#{$prefix + '-' + $name} {
        #{$property}: $value !important;
      }
    }
  }

  // alias
  @for $i from 1 through 9 {
    .#{$prefix + '-grey-' + $i * 100} {
      @extend .#{$prefix + '-gray-' + $i * 100};
    }

    .#{$prefix + '-blue-grey-' + $i * 100} {
      @extend .#{$prefix + '-blue-gray-' + $i * 100};
    }
  }
}

// Generate text-color helpers
@include generate-colors('text', 'color');
// Generate background-color helpers
@include generate-colors('bg', 'background-color');
// Generate border-color helpers
@include generate-colors('border', 'border-color');
