/* -------------  MEDICAL THEME SETUP  ------------- */
// Core Angular Material imports
@use '@angular/material' as mat;
@use 'sass:map';
@use 'sass:color';

// Custom palette definitions
@use './_medical-palette.scss' as med;

// Include mat.core() to emit theme-independent styles (only needed once)
@include mat.core();

/* 1. Define palette variables for easy customization */
$primary-palette: med.$cyan-palette;  // Primary palette (teal-like cyan)
$tertiary-palette: med.$blue-palette; // Tertiary palette (medical blue)

/* 2. Configure the theme with Material 3 */
$medical-light-theme: mat.define-theme((
  color: (
    theme-type: light,
    primary: $primary-palette,
    tertiary: $tertiary-palette,
    // Let Material generate the rest of the required palettes
    use-system-variables: false,
  ),
  typography: (
    // Use Material 3 typography system
    use-system-variables: false,
    brand-family: 'Roboto, Cairo, sans-serif',
    plain-family: 'Roboto, Cairo, sans-serif',
    bold-weight: 700,
    medium-weight: 500,
    regular-weight: 400,
  ),
  density: (
    scale: 0  // 0 = default, -1 = compact, -2 = dense
  )
));

// Dark theme configuration
$medical-dark-theme: mat.define-theme((
  color: (
    theme-type: dark,
    primary: $primary-palette,
    tertiary: $tertiary-palette,
    use-system-variables: false,
  ),
  typography: (
    use-system-variables: false,
    brand-family: 'Roboto, Cairo, sans-serif',
    plain-family: 'Roboto, Cairo, sans-serif',
    bold-weight: 700,
    medium-weight: 500,
    regular-weight: 400,
  ),
  density: (
    scale: 0
  )
));

/* 3. Apply the light theme globally and define custom CSS properties */
// Apply the light theme to the entire document and set custom variables
:root {
  // Include all component themes at once
  @include mat.all-component-themes($medical-light-theme);

  // Apply system-level theming for Material 3
  @include mat.system-level-colors($medical-light-theme);
  @include mat.system-level-typography($medical-light-theme);

  /* 4. Custom CSS properties for theming */
  // Define custom CSS variables for consistent theming across the application

  /* Primary color variables from primary palette */
  --mat-primary: #{map.get($primary-palette, 40)};
  --mat-primary-darker: #{map.get($primary-palette, 35)};
  --mat-primary-rgb: #{color.channel(map.get($primary-palette, 40), "red", $space: rgb)} #{color.channel(map.get($primary-palette, 40), "green", $space: rgb)} #{color.channel(map.get($primary-palette, 40), "blue", $space: rgb)};
  --mat-warn-rgb: #{color.channel(map.get(map.get(med.$red-palette, error), 40), "red", $space: rgb)} #{color.channel(map.get(map.get(med.$red-palette, error), 40), "green", $space: rgb)} #{color.channel(map.get(map.get(med.$red-palette, error), 40), "blue", $space: rgb)};

  /* Override primary colors from primary palette */
  --mat-sys-primary: #{map.get($primary-palette, 30)};
  --mat-sys-on-primary: #{map.get($primary-palette, 100)};
  --mat-sys-primary-container: #{map.get($primary-palette, 90)};
  --mat-sys-on-primary-container: #{map.get($primary-palette, 10)};

  /* Override surface colors from neutral palette */
  --mat-sys-surface: #{map.get(map.get($primary-palette, neutral), 100)};
  --mat-sys-surface-variant: #{map.get(map.get($primary-palette, neutral), 95)};
  --mat-sys-on-surface: #{map.get(map.get($primary-palette, neutral), 10)};
  --mat-sys-on-surface-variant: #{map.get(map.get($primary-palette, 'neutral-variant'), 30)};

  /* Sidenav specific overrides */
  --mat-sidenav-container-background-color: #{map.get($primary-palette, 40)};
  --mat-sidenav-content-background-color: #{map.get(map.get($primary-palette, neutral), 100)};

  /* Custom semantic tokens for medical context */

  /* Primary colors from primary palette */
  --med-primary-dark: #{map.get($primary-palette, 40)};
  --med-primary-dark-hover: #{map.get($primary-palette, 35)};
  --med-primary-hover: #{map.get($primary-palette, 80)};
  --med-primary-light: #{map.get($primary-palette, 90)};

  /* Secondary/tertiary colors from palettes */
  --med-secondary: #{map.get(med.$green-palette, 50)};
  --med-secondary-light: #{map.get(med.$green-palette, 90)};

  /* Status colors from palettes */
  --med-success: #{map.get(med.$green-palette, 50)};
  --med-warning: #{map.get(med.$orange-palette, 50)};
  --med-error: #{map.get(map.get(med.$red-palette, error), 40)};
  --med-info: #{map.get($tertiary-palette, 50)};

  /* Surface colors from neutral palette */
  --med-surface-white: #{map.get(map.get($primary-palette, neutral), 100)};
  --med-surface-light: #{map.get(map.get($primary-palette, neutral), 98)};
  --med-surface-variant: #{map.get(map.get($primary-palette, neutral), 95)};

  /* Text colors from neutral palettes */
  --med-text-primary: #{map.get(map.get($primary-palette, neutral), 10)};
  --med-text-secondary: #{map.get(map.get($primary-palette, 'neutral-variant'), 30)};
  --med-text-disabled: #{map.get(map.get($primary-palette, neutral), 60)};
  --med-text-on-dark: #{map.get(map.get($primary-palette, neutral), 100)};

  /* Medical-specific semantic colors from palettes */
  --med-urgent: #{map.get(map.get(med.$red-palette, error), 40)};
  --med-positive: #{map.get(med.$green-palette, 50)};
  --med-caution: #{map.get(med.$orange-palette, 50)};
  --med-neutral: #{map.get(map.get($primary-palette, 'neutral-variant'), 40)};

  /* Appointment status colors from palettes with transparency */
  --appointment-status-scheduled: #{color.adjust(map.get($tertiary-palette, 60), $alpha: -0.34)};
  --appointment-status-confirmed: #{color.adjust(map.get(med.$green-palette, 60), $alpha: -0.34)};
  --appointment-status-completed: #{color.adjust(map.get(map.get($primary-palette, neutral), 60), $alpha: -0.34)};
  --appointment-status-cancelled: #{color.adjust(map.get(map.get(med.$red-palette, error), 60), $alpha: -0.34)};
  --appointment-status-no-show: #{color.adjust(map.get(med.$orange-palette, 60), $alpha: -0.34)};
  --appointment-status-rescheduled: #{color.adjust(map.get(med.$violet-palette, 60), $alpha: -0.34)};

  /* Full opacity versions from palettes */
  --appointment-status-scheduled-full: #{map.get($tertiary-palette, 60)};
  --appointment-status-confirmed-full: #{map.get(med.$green-palette, 60)};
  --appointment-status-completed-full: #{map.get(map.get($primary-palette, neutral), 60)};
  --appointment-status-cancelled-full: #{map.get(map.get(med.$red-palette, error), 60)};
  --appointment-status-no-show-full: #{map.get(med.$orange-palette, 60)};
  --appointment-status-rescheduled-full: #{map.get(med.$violet-palette, 60)};
}

/* 5. Material component-specific overrides */
// Buttons
.mat-mdc-raised-button.mat-primary,
.mat-mdc-flat-button.mat-primary {
  color: white !important;
  background-color: var(--med-primary-dark) !important;
}

.mat-mdc-raised-button.mat-primary:hover,
.mat-mdc-flat-button.mat-primary:hover {
  background-color: var(--med-primary-dark-hover) !important;
}

// Form fields
.mat-mdc-form-field-focus-overlay {
  background-color: var(--med-primary-dark);
}

.mdc-text-field--focused:not(.mdc-text-field--disabled) .mdc-floating-label {
  color: var(--med-primary-dark) !important;
}

.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow {
  color: var(--med-primary-dark);
}

// Checkboxes and Radio buttons
.mat-mdc-checkbox-checked .mat-mdc-checkbox-background,
.mat-mdc-radio-button.mat-mdc-radio-checked .mat-mdc-radio-background::before {
  background-color: var(--med-primary-dark) !important;
}

// Progress bars and spinners
.mat-mdc-progress-bar-fill::after {
  background-color: var(--med-primary-dark);
}

.mat-mdc-progress-spinner circle,
.mat-mdc-spinner circle {
  stroke: var(--med-primary-dark);
}

// Tabs
.mat-mdc-tab.mat-mdc-tab-active .mat-mdc-tab-text-label {
  color: var(--med-primary-dark);
}

.mat-mdc-tab-group.mat-primary .mat-mdc-tab-header .mat-mdc-tab-header-pagination-chevron,
.mat-mdc-tab-group.mat-primary .mat-mdc-tab-header .mat-mdc-focus-indicator::before,
.mat-mdc-tab-nav-bar.mat-primary .mat-mdc-tab-header .mat-mdc-tab-header-pagination-chevron,
.mat-mdc-tab-nav-bar.mat-primary .mat-mdc-tab-header .mat-mdc-focus-indicator::before {
  border-color: var(--med-primary-dark);
}

// Slide toggle
.mat-mdc-slide-toggle.mat-primary .mdc-switch--checked .mdc-switch__track {
  background-color: var(--med-primary-hover);
}

.mat-mdc-slide-toggle.mat-primary .mdc-switch--checked .mdc-switch__handle {
  background-color: var(--med-primary-dark);
}

// Menu and Select
.mat-mdc-menu-item.active,
.mat-mdc-menu-item:hover:not([disabled]),
.mat-mdc-option.mat-mdc-option-active,
.mat-mdc-option:hover:not(.mat-mdc-option-disabled) {
  background-color: var(--med-primary-hover) !important;
}

// Table
.mat-mdc-table {
  background-color: var(--mat-sys-surface);
}

.mat-mdc-header-cell {
  font-weight: 600;
  color: var(--med-text-primary) !important;
}

// Chips
.mat-mdc-chip-selected.mat-primary {
  color: white !important;
  background-color: var(--med-primary-dark) !important;
}

// Datepicker
.mat-calendar-body-cell.mat-calendar-body-active {
  color: white;
}

// Snackbar
.mat-mdc-snack-bar-container {
  --mdc-snackbar-container-color: var(--med-primary-dark);
  --mdc-snackbar-supporting-text-color: white;
}

/* 6. Dark mode support */
// Apply dark theme to elements with .theme-dark class
.theme-dark {
  // Use color mixins for dark mode (more efficient than re-including all themes)
  @include mat.all-component-colors($medical-dark-theme);
  @include mat.system-level-colors($medical-dark-theme);

  /* CSS Variables for dark mode from palettes */
  --mat-primary: #{map.get($primary-palette, 80)};
  --mat-primary-darker: #{map.get($primary-palette, 70)};
  --mat-primary-rgb: #{color.channel(map.get($primary-palette, 80), "red", $space: rgb)} #{color.channel(map.get($primary-palette, 80), "green", $space: rgb)} #{color.channel(map.get($primary-palette, 80), "blue", $space: rgb)};
  --mat-sys-primary: #{map.get($primary-palette, 80)};
  --mat-sys-on-primary: #{map.get($primary-palette, 20)};
  --mat-sys-primary-container: #{map.get($primary-palette, 30)};
  --mat-sys-on-primary-container: #{map.get($primary-palette, 90)};
  --mat-sys-surface: #{map.get(map.get($primary-palette, neutral), 10)};
  --mat-sys-surface-variant: #{map.get(map.get($primary-palette, 'neutral-variant'), 30)};
  --mat-sys-on-surface: #{map.get(map.get($primary-palette, neutral), 90)};
  --mat-sys-on-surface-variant: #{map.get(map.get($primary-palette, 'neutral-variant'), 80)};

  /* Sidenav specific overrides for dark mode */
  --mat-sidenav-container-background-color: #{map.get(map.get($primary-palette, neutral), 6)};
  --mat-sidenav-content-background-color: #{map.get(map.get($primary-palette, neutral), 10)};

  /* Medical theme dark mode colors from palettes */
  --med-surface-white: #{map.get(map.get($primary-palette, neutral), 10)};
  --med-surface-light: #{map.get(map.get($primary-palette, neutral), 20)};
  --med-surface-variant: #{map.get(map.get($primary-palette, 'neutral-variant'), 30)};
  --med-text-primary: #{map.get(map.get($primary-palette, neutral), 90)};
  --med-text-secondary: #{map.get(map.get($primary-palette, 'neutral-variant'), 80)};
  --med-text-disabled: #{map.get(map.get($primary-palette, neutral), 60)};
  --med-text-on-dark: #{map.get(map.get($primary-palette, neutral), 90)};

  /* Update primary colors for dark mode from palettes */
  --med-primary-dark: #{map.get($primary-palette, 80)};
  --med-primary-dark-hover: #{map.get($primary-palette, 70)};
  --med-primary-hover: #{map.get($primary-palette, 30)};
  --med-primary-light: #{map.get($primary-palette, 90)};
}

/* Dark mode component overrides (outside .theme-dark to avoid deep nesting) */
.theme-dark .mat-mdc-raised-button.mat-primary,
.theme-dark .mat-mdc-flat-button.mat-primary {
  color: var(--med-primary-dark) !important;
  background-color: var(--med-primary-light) !important;
}

.theme-dark .mat-mdc-raised-button.mat-primary:hover,
.theme-dark .mat-mdc-flat-button.mat-primary:hover {
  color: white !important;
  background-color: var(--med-primary-hover) !important;
}

.theme-dark .mat-mdc-form-field-focus-overlay {
  background-color: var(--med-primary-light);
}

.theme-dark .mdc-text-field--focused:not(.mdc-text-field--disabled) .mdc-floating-label {
  color: var(--med-primary-light) !important;
}

.theme-dark .mat-mdc-checkbox-checked .mat-mdc-checkbox-background,
.theme-dark .mat-mdc-radio-button.mat-mdc-radio-checked .mat-mdc-radio-background::before {
  background-color: var(--med-primary-light) !important;
}

.theme-dark .mat-mdc-tab.mat-mdc-tab-active .mat-mdc-tab-text-label {
  color: var(--med-primary-light);
}

.theme-dark .mat-mdc-menu-item.active,
.theme-dark .mat-mdc-menu-item:hover:not([disabled]),
.theme-dark .mat-mdc-option.mat-mdc-option-active,
.theme-dark .mat-mdc-option:hover:not(.mat-mdc-option-disabled) {
  color: var(--med-text-on-dark) !important;
  background-color: var(--med-primary-dark-hover) !important;
}

.theme-dark .mat-mdc-table {
  background-color: var(--med-surface-light);
}

.theme-dark .mat-mdc-header-cell {
  color: var(--med-text-primary) !important;
}
